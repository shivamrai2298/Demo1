Q9: 64 Ã— 32
Q7: B
Q12: Relu
Q20: 62

!pip install torch torchvision torchaudio matplotlib numpy --quiet

import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np


import numpy as np
x_train = np.linspace(-2, 2, 50)
y_train = 3 * x_train ** 3 - 2 * x_train ** 2 + x_train + 5  # Example nonlinear relation


X = torch.tensor(x_train, dtype=torch.float32).unsqueeze(1)
y = torch.tensor(y_train, dtype=torch.float32).unsqueeze(1)


model_layers = nn.Sequential(nn.Linear(1, 10),nn.Tanh(),nn.Linear(10, 1))


criterion = nn.MSELoss()
optimizer = optim.Adam(model_layers.parameters(), lr=0.01)


epochs = 2500
for epoch in range(epochs):
    optimizer.zero_grad()
    y_pred = model_layers(X)
    loss = criterion(y_pred, y)
    loss.backward()
    optimizer.step()

    if (epoch + 1) % 500 == 0:
        print(f"Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.6f}")


with torch.no_grad():
    predicted = model_layers(X).squeeze().numpy()


sorted_idx = np.argsort(x_train)
x_sorted = x_train[sorted_idx]
y_true_sorted = y_train[sorted_idx]
y_pred_sorted = predicted[sorted_idx]


plt.figure(figsize=(8, 5))
plt.plot(x_sorted, y_true_sorted, color='blue', label='True function (Blue)')
plt.plot(x_sorted, y_pred_sorted, color='red', linestyle='--', label='Model prediction (Red)')
plt.title("Model vs True Function")
plt.xlabel("x_train")
plt.ylabel("y_train")
plt.legend()
plt.grid(True)
plt.show()
